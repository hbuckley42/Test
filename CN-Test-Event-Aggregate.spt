<?xml version = "1.0" encoding = "UTF-8" ?>

<Script>
  <Version>1.57</Version>
  <Description>
    Unit tests script for EVENT data functions.
    The script will test the event functionality for the Aggregate event function ( event.Aggregate )
    A data set will be defined at the start of the script and this dataset will be accessed by the
    defined Aggregate functions.

    Note: There are 2 variants for this command and both variants need to be tested.
  </Description>

  <Copyright>2022 Bentley Systems, Incorporated. All rights reserved.</Copyright>

  <Parameter>
    <Name>blnThrowExceptionOnFailure</Name>
    <Type>boolean</Type>
    <Default>true</Default>
    <Alias>Throw Exception on Failure</Alias>
  </Parameter>

  <Parameter required="true">
    <Name>strAttrCorridor</Name>
    <Type>string</Type>
    <Source>corridor</Source>
    <Alias>Corridor</Alias>
    <Default>121</Default>
  </Parameter>

  <Parameter required="true">
    <Name>strMarkerStart</Name>
    <Type>string</Type>
    <Default>2</Default>
  </Parameter>

  <Parameter required="true">
    <Name>strMarkerEnd</Name>
    <Type>string</Type>
    <Default>2</Default>
  </Parameter>

  <Parameter required="true">
    <Name>strAttrTrackId</Name>
    <Type>string</Type>
    <Alias>Track</Alias>
    <Default>01</Default>
  </Parameter>

  <Commands>

    <!-- 
      The event.Aggregate () function is defined with the Events section of the command reference guide (section 14.2)
			The event.Aggregate () function allows the system to perform a series of aggregation functions based on the 
			specified aggregate option and event data field.
			
			The aggregation options supported at present are :

          Count, Dominant, Maximum, Mean, Minimum, Median, Mode, StandardDeviation, Sum, ProratedSum, WeightedMean

      The following script performs the following:

			    1. Define a set of data in memory to be used for the testing.
					2. Executes a series of functions defined within the script to test each of the aggregate options.
          3. Compares the aggregated value against a known, defined value which in turn provide a success
					   or failure of the function.
          4. A boolean parameter defined at the start of the script controls the generation of warning messages
					   or error ( and thus failure ) messages.
 
      In the following we are going to concentrate on the "Freight Speed"
      The Freight speed values used in the 5 events are :

          15, 15, 20, 35, 45

      The following have been calculated based on the above:

          1. Count    = 5   ( The total number of events )
          2. Sum      = 130 ( The sum total of the selected attribute )
          3. Mean     = 26  ( The mean value of all matching event attributes will be calculated by summing all values and 
                              dividing by the number of overlapping events.)
          4. Mode     = 15  ( The MODE value is the most common value )
          5. StdDev   = 12  ( The standard deviation value of all matching event attributes will be calculated using attribute 
                              values for overlapping events)
          6. Dominant = 15  ( The value that covers the greatest percentage of all matching event attributes will be used )
          7. Median   = 20  ( This is the centre value of all attribute values when odered.)
          8. Minimum  = 15
          9. Maximum  = 45
         10. Proratedsum = 130
         11. Weightedmean = 26
         12. WeightedStandardDeviation = 12

      * All dates used need to be defined as VARIABLE values and must have a specified date format.
      * The parameter blnThrowExceptionOnFailure needs to be catered for within the script.
      * Script spacing needs to be observed.

      Note: The whole script now makes use of uniFoot as the unit of measure.
	  -->

    uniFoot = unit.GetUnit ("US Customary", "foot")
    strDateFormat = util.Assign ("yyyy-MM-dd")

    <!-- Initial Date range is 2 years -->
    strAttrStartDateValue = util.Assign ("2020-01-01 00:00:00.0")
    strAttrEndDateValue = util.Assign ("2022-01-01 00:00:00.0")

    strAttrStartDate = util.Assign ("Start Date")
    strAttrEndDate = util.Assign ("End Date")
    estMarkerRangeEvents = event.CreateRangeEventsFromMarkers (strAttrCorridor, , , , , uniFoot, strAttrTrackId )

    datAttrStartDate = util.ParseDate (strAttrStartDateValue, strDateFormat)
    datAttrEndDate = util.ParseDate (strAttrEndDateValue, strDateFormat)

    lisHistFilterOptions = collection.ListCreate ("Contain", "Exclude", "Overlap", "Within")
    strAttrSource = util.Assign ("Freight Speed")

    <!-- ################################################################################################
         ################################### LINEAR EVENT MASKS #########################################
         ################################################################################################
    -->
    strEventSetName = util.Assign ("EVENT-MASK")
    estEventMask = script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )

    strEventSetName = util.Assign ("EVENT-MASK-TRACK")
    estEventMaskTrack = script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Track" )

    <!-- ################################################################################################
         ################################### POINT EVENT MASKS #########################################
         ################################################################################################
    -->
    strEventSetName = util.Assign ("EVENT-MASK-POINT")
    estEventsPointMask = script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )

    strEventSetName = util.Assign ("EVENT-MASK-POINT-TRACK")
    estEventsPointMaskTrack = script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Track" )

    bolSkip = util.Assign(true) 
    control.GoToIf("$bolSkip","Skip")
    Skip: <!-- So I have defined this marker so that we can bypass areas of the script that have been tested and which are fine.-->

    <!-- Variant 1 [Test set T1 - Many Linear events agains a corridor] -->
    strEventSetName = util.Assign ("TEST-T1")
    estEventsTargetT1 = script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )
    bolSuccess = script.Call ("subF-TestAggregateFunctionT1", blnThrowExceptionOnFailure, "T1", estEventMask, estEventsTargetT1, strAttrSource)

    <!-- Variant 1 [ Test set T2 - 2 Linear events against a corridor ] -->
    strEventSetName=util.Assign ("TEST-T2")
    estEventsTargetT2=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )
    bolSuccess = script.Call ("subF-TestAggregateFunctionT2", blnThrowExceptionOnFailure, "T2", estEventMask, estEventsTargetT2, strAttrSource)

     <!-- Variant 1 [ Test set T3 - A single linear event against a corridor  ] -->
    strEventSetName=util.Assign ("TEST-T3")
    estEventsTargetT3=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )
    bolSuccess = script.Call ("subF-TestAggregateFunctionT3", blnThrowExceptionOnFailure, "T3", estEventMask, estEventsTargetT3, strAttrSource)

    <!-- Test set T4 [ Here both Mask and Aggregate are points ] -->
    <!-- Do we need to test for: 

          (a) Mask traversal is corridor and aggregate traversal is corridor
          (b) Mask traversal is track and aggregate traversal is corridor
          (c) Mask traversal is corridor and aggregate traversal is track
          (d) Mask traversal is track and aggregate traversal is track
    -->
    bolBypassT4 = util.Assign(true) 
    control.GoToIf("$bolBypassT4","BypassT4")
      console.ShowValue("INFO:","NOTE THAT THERE IS A BYPASS ON T4")
    BypassT4:
    strEventSetName=util.Assign ("TEST-T4")
    estEventsTargetT4=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )

    <!-- (a) Mask traversal is corridor and aggregate traversal is corridor -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT4", blnThrowExceptionOnFailure, "T4a", estEventsPointMask, estEventsTargetT4, strAttrSource)
    <!-- (b) Mask traversal is track and aggregate traversal is corridor -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT4", blnThrowExceptionOnFailure, "T4b", estEventsPointMaskTrack, estEventsTargetT4, strAttrSource)

    estEventsTargetT4=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Track" )
    <!-- (c) Mask traversal is corridor and aggregate traversal is track -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT4", blnThrowExceptionOnFailure, "T4c", estEventsPointMask, estEventsTargetT4, strAttrSource)
    <!-- (d) Mask traversal is track and aggregate traversal is track -->
    console.ShowValue("Events Mask Track",estEventMaskTrack)
    bolSuccess = script.Call ("subF-TestAggregateFunctionT4", blnThrowExceptionOnFailure, "T4d", estEventsPointMaskTrack, estEventsTargetT4, strAttrSource)

    bolBypassT5 = util.Assign(true) 

    <!-- Test set T5 [ Linear events aggregated across a point mask ]-->
    <!-- So here the data sets themselves do not change. The traversals of the 
         data change. 
         
         Here we will have to test for the following scenarios:
    
          (a) Mask traversal is corridor and aggregate traversal is corridor
          (b) Mask traversal is corridor and aggregate traversal is track
          (c) Mask traversal is track and aggregate traversal is track
          (d) Mask traversal is track and aggregate traversal is corridor
    -->
    control.GoToIf("$bolBypassT5","BypassT5")
      console.ShowValue("INFO:","NOTE THAT THERE IS A BYPASS ON T5")
    BypassT5:
    strEventSetName=util.Assign ("TEST-T5")
    estEventsTargetT5=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )
    
    <!-- (a) Mask traversal is corridor and aggregate traversal is corridor -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT5", blnThrowExceptionOnFailure, "T5a", estEventsPointMask , estEventsTargetT5, strAttrSource)
    <!-- (b) Mask traversal is track and aggregate traversal is corridor -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT5", blnThrowExceptionOnFailure, "T5b", estEventsPointMaskTrack, estEventsTargetT5, strAttrSource)

    estEventsTargetT5 = script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Track" )
    <!-- (c) Mask traversal is corridor and aggregate traversal is track -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT5", blnThrowExceptionOnFailure, "T5c", estEventsPointMask, estEventsTargetT5, strAttrSource)
    <!-- (d) Mask traversal is track and aggregate traversal is track -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT5", blnThrowExceptionOnFailure, "T5d", estEventsPointMaskTrack, estEventsTargetT5, strAttrSource)

    <!-- Test set T6 [ Here there are 3 linear events ]  -->
    <!-- [ Mask is CORRIDOR based and 'To Aggregate' is TRACK based ] -->
    <!-- So here the data sets themselves do not change. What changes here are the 
         Corridor and Track definitions.
         
         Here we will have to test for the following scenarios:
    
          (a) Mask traversal is corridor and aggregate traversal is corridor
          (b) Mask traversal is corridor and aggregate traversal is track
          (c) Mask traversal is track and aggregate traversal is track
          (d) Mask traversal is track and aggregate traversal is corridor
    -->

    bolBypassT6 = util.Assign(true) 
    control.GoToIf("$bolBypassT6","BypassT6")
      console.ShowValue("INFO:","NOTE THAT THERE IS A BYPASS ON T6")
    BypassT6:
    strEventSetName=util.Assign ("TEST-T6")
    estEventsTargetT6=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )

    <!-- (a) Mask traversal is corridor and aggregate traversal is corridor -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT6", blnThrowExceptionOnFailure, "T6a", estEventsPointMask , estEventsTargetT6, strAttrSource)
    <!-- (b) Mask traversal is track and aggregate traversal is corridor -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT6", blnThrowExceptionOnFailure, "T6b", estEventsPointMaskTrack, estEventsTargetT6, strAttrSource)

    estEventsTargetT5=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Track" )
    <!-- (c) Mask traversal is corridor and aggregate traversal is track -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT6", blnThrowExceptionOnFailure, "T6c", estEventsPointMask, estEventsTargetT6, strAttrSource)
    <!-- (c) Mask traversal is track and aggregate traversal is track -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT6", blnThrowExceptionOnFailure, "T6d", estEventsPointMaskTrack, estEventsTargetT6, strAttrSource)

    <!-- Test set T7 -->
    <!-- [ Mask is TRACK based and 'To Aggregate' is CORRIDOR based.] --> 
    <!-- Here we will have to test for the following scenarios:
    
         1. Mask is point and aggregate is linear
         2. Mask is point and aggregate is point
         3. Mask is linear and aggregate is linear
         4. Mask is linear and aggregate is point
    
    -->
    bolBypassT7 = util.Assign(true) 
    control.GoToIf("$bolBypassT7","BypassT7")
      console.ShowValue("INFO:","NOTE THAT THERE IS A BYPASS ON T7")
    BypassT7:
    strEventSetName=util.Assign ("TEST-T7")
    estEventsTargetT7=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )
    <!--
    bolSuccess = script.Call ("subF-TestAggregateFunctionT7", blnThrowExceptionOnFailure, "T7-1", estEventMask, estEventsTargetT7, strAttrSource)
    bolSuccess = script.Call ("subF-TestAggregateFunctionT7", blnThrowExceptionOnFailure, "T7-2", estEventMask, estEventsTargetT7, strAttrSource)
    bolSuccess = script.Call ("subF-TestAggregateFunctionT7", blnThrowExceptionOnFailure, "T7-3", estEventMask, estEventsTargetT7, strAttrSource)
    bolSuccess = script.Call ("subF-TestAggregateFunctionT7", blnThrowExceptionOnFailure, "T7-4", estEventMask, estEventsTargetT7, strAttrSource)
    -->

    <!-- (a) Mask traversal is corridor and aggregate traversal is corridor -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT7", blnThrowExceptionOnFailure, "T7a", estEventsPointMask , estEventsTargetT7, strAttrSource)
    <!-- (b) Mask traversal is track and aggregate traversal is corridor -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT7", blnThrowExceptionOnFailure, "T7b", estEventsPointMask, estEventsTargetT7, strAttrSource)

    estEventsTargetT5=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Track" )
    <!-- (c) Mask traversal is corridor and aggregate traversal is track -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT7", blnThrowExceptionOnFailure, "T7c", estEventsPointMask, estEventsTargetT7, strAttrSource)
    <!-- (c) Mask traversal is track and aggregate traversal is track -->
    bolSuccess = script.Call ("subF-TestAggregateFunctionT7", blnThrowExceptionOnFailure, "T7d", estEventsPointMask, estEventsTargetT7, strAttrSource)

    <!--#########################################################################################################
        ######################################   HISTORIC TESTING ###############################################
        #########################################################################################################
    -->

    <!-- Test set H1 [Note: Values returned for the functions listed against expected results:] -->
    strEventSetName=util.Assign ("TEST-H1")
    estEventsHistoric1=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )
    bolSuccess = script.Call ("subF-TestAggregateFunctionH1", blnThrowExceptionOnFailure, "H1", estEventMask, estEventsHistoric1, strAttrSource, lisHistFilterOptions)

    <!-- Test set H2 [Note: Values returned for the functions listed against expected results:] -->
    strEventSetName=util.Assign ("TEST-H2")
    estEventsHistoric2=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )
    bolSuccess = script.Call ("subF-TestAggregateFunctionH2", blnThrowExceptionOnFailure, "H2", estEventMask, estEventsHistoric2, strAttrSource, lisHistFilterOptions)

    <!-- Test set H3 [Note: Values returned for the functions listed against expected results:] -->
    strEventSetName=util.Assign ("TEST-H3")
    estEventsHistoric3=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )
    bolSuccess = script.Call ("subF-TestAggregateFunctionH3", blnThrowExceptionOnFailure, "H3", estEventMask, estEventsHistoric3, strAttrSource, lisHistFilterOptions)

    <!-- Test set H4 [Note: Values returned for the functions listed against expected results:] -->
    strEventSetName=util.Assign ("TEST-H4")
    estEventsHistoric4=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )
    bolSuccess = script.Call ("subF-TestAggregateFunctionH4", blnThrowExceptionOnFailure, "H4", estEventMask, estEventsHistoric4, strAttrSource, lisHistFilterOptions)

    <!-- Test set H5. [  3 Linear events aggregated across a point mask with history ] -->
    strEventSetName=util.Assign ("TEST-H5")
    estEventsHistoric5=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )
    bolSuccess = script.Call ("subF-TestAggregateFunctionH5", blnThrowExceptionOnFailure, "H5", estEventsPointMask, estEventsHistoric5, strAttrSource, lisHistFilterOptions)

    <!-- Test set H6. [ Mask is CORRIDOR based and 'To Aggregate' is TRACK based with history] -->
    strEventSetName=util.Assign ("TEST-H6")
    estEventsHistoric6=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )
    bolSuccess = script.Call ("subF-TestAggregateFunctionH6", blnThrowExceptionOnFailure, "H6", estEventsPointMask, estEventsHistoric6, strAttrSource, lisHistFilterOptions)
   
    <!-- Test set H7. [ Mask is TRACK based and 'To Aggregate' is CORRIDOR based with history] -->
    strEventSetName=util.Assign ("TEST-H7")
    estEventsHistoric7=script.Call ("subF-ExtractTestData", strEventSetName, strAttrCorridor, strAttrTrackId, strMarkerStart, strMarkerEnd, "Corridor" )
    bolSuccess = script.Call ("subF-TestAggregateFunctionH7", blnThrowExceptionOnFailure, "H7", estEventMask, estEventsHistoric7, strAttrSource, lisHistFilterOptions)
    
  </Commands>

  <!--#########################################################################################################
      ######################################   TEST FUNCTION DEFINITION SECTION ###############################
      #########################################################################################################
  -->

  <Function logged = "false">
    <Name>subF-TestAggregateFunctionT1</Name>

    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTarget</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>

    <!-- Variant 1 -->
    <!-- Test set T1 -->
    <!-- Note: Values returned for the functions listed against expected results:

               Count                    : 12
               Dominant                 : 20
               Maximum                  : 45 , 
               Mean                     : 27.92
               Median                   : 25.0
               Minimum                  : 15
               Mode                     : 20
               Standard Deviation       : 11.078946500256942
               Sum                      : 335
               Prorated Sum             : 335.0
               Weighted Mean            : 27.92 ( rounded to 2 )
               WeightedStandardDeviation: 11.0
    -->
    <Commands>
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTarget, 12, )
      <!-- #### [DOMINANT INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTarget, 20, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTarget, 45, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTarget, 27.92, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTarget, 25.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTarget, 15, )
      <!-- #### [MODE INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTarget, 20, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTarget, 11.08, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTarget, 335, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTarget, 335.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTarget, 27.92, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTarget, 11.08, )
    </Commands>
  </Function>

  <Function logged = "false">
    <Name>subF-TestAggregateFunctionT2</Name>

    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTarget</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>

    <!-- Test set T2 -->
    <!-- Note: Values returned for the functions listed against expected results:

               Count                    : 2
               Dominant                 : 30
               Maximum                  : 30
               Mean                     : 25.0 
               Median                   : 25.0
               Minimum                  : 20
               Mode                     : 30
               Standard Deviation       : 5.0
               Sum                      : 50
               Prorated Sum             : 50.0 
               Weighted Mean            : 25.83 ( rounded to 2 )
               WeightedStandardDeviation: 5.0 
    -->
    <Commands>
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTarget, 2, )
      <!-- #### [DOMINANT INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTarget, 20, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTarget, 30, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTarget, 25.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTarget, 25.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTarget, 20, )
      <!-- #### [MODE INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTarget, 30, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTarget, 5.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTarget, 50, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTarget, 50.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTarget, 25.83, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTarget, 5.07, )
    </Commands>
  </Function>

  <Function logged = "false">
    <Name>subF-TestAggregateFunctionT3</Name>

    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTarget</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>
    <!-- Test set T3 -->
    <!-- Note: Values returned for the functions listed against expected results:

               Count                    : 1
               Dominant                 : 20
               Maximum                  : 20
               Mean                     : 20.0 
               Median                   : 20.0
               Minimum                  : 20
               Mode                     : 20
               Standard Deviation       : 0.0
               Sum                      : 20
               Prorated Sum             : 20.0 
               Weighted Mean            : 20.0
               WeightedStandardDeviation: 0.0
    -->
    <Commands>
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTarget, 1, )
      <!-- #### [DOMINANT INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTarget, 20, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTarget, 20, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTarget, 20.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTarget, 20.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTarget, 20, )
      <!-- #### [MODE INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTarget, 20, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTarget, 0.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTarget, 20, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTarget, 20.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTarget, 20.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTarget, 0.0, )
    </Commands>
  </Function>


  <Function logged = "false">
    <Name>subF-TestAggregateFunctionT4</Name>
    <!--TEST : Mask is a point event and the event set to aggregate is also point. -->
    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTarget</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>
    <!-- Test set T4 Point values -->
    <!-- Test T4 is now divided into T4a , T4b , T4c and T4d . All of the results should be the same it is just that we are
         tesing variations of traversal.
    -->
    <!-- Note: Values returned for the functions listed against expected results:

                                          Expected   Actual     Status
               Count                    :  5         3          INCORRECT
               Dominant                 : 15                    UNTESTED
               Maximum                  : 30         25         INCORRECT
               Mean                     : 23.0       NaN        INCORRECT
               Median                   : 25.0       null       INCORRECT
               Minimum                  : 15
               Mode                     : 15                    UNTESTED
               Standard Deviation       : 5.1                   INCORRECT 
               Sum                      : 115        60         INCORRECT
               Prorated Sum             : 115        Null
               Weighted Mean            :  23.0      NaN
               WeightedStandardDeviation:   5.1      NaN
    -->
    <Commands>
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTarget, 3, )
      <!-- #### [DOMINANT INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTarget, 15, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTarget, 25, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTarget, NaN, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTarget,, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTarget, 15, )
      <!-- #### [MODE INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTarget, 25, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTarget, NaN, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTarget, 60, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTarget, NaN, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTarget, NaN, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTarget, NaN, )
    </Commands>
  </Function>

  <Function logged = "false">
    <Name>subF-TestAggregateFunctionT5</Name>
    <!--TEST : Mask is a point event and the event set to aggregate has length. -->
    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTarget</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>
    <!-- Test set T5 Point values -->
    <!-- Note: Values returned for the functions listed against expected results:
         Test T5 is now divided into T5a , T5b , T5c and T5d . All of the results should be the same it is just that we are
         tesing variations of traversal.

               Count                    :  3
               Dominant                 : 20
               Maximum                  : 25
               Mean                     : 20.0 
               Median                   : 20.0
               Minimum                  : 15
               Mode                     : 15
               Standard Deviation       :  4.08
               Sum                      : 60
               Prorated Sum             : 60.0 
               Weighted Mean            : 20.0
               WeightedStandardDeviation:  4.0
    -->
    <Commands>
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTarget, 3, )
      <!-- #### [DOMINANT INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTarget, 20, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTarget, 25, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTarget, 20.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTarget, 20.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTarget, 15, )
      <!-- #### [MODE INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTarget, 20, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTarget, 4.08, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTarget, 60, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTarget, 60.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTarget, 20.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTarget, 4.08, )
    </Commands>
  </Function>

  <Function logged = "false">
    <Name>subF-TestAggregateFunctionT6</Name>
    <!--TEST : Mask is a Corridor and the aggregate set is track based. -->
    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTarget</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>
    <!-- Test set T6 - [ Mask is CORRIDOR and Aggretage is TRACK based. ] -->
    <!-- Note: Values returned for the functions listed against expected results:
         Test T6 is now divided into T6a , T6b , T6c and T6d . All of the results should be the same it is just that we are
         tesing variations of traversal.

               Count                    :  3   [ Expected = 2       , Actual = 3  , Result = INCORRECT ]
               Dominant                 : 25   [ Expected = 15 | 20 , Actual = 25 , Result = INCORRECT ]
               Maximum                  : 25   [ Expected = 20      , Actual = 25 , Result = INCORRECT ]
               Mean                     : NaN  [ Expected = 17.5    , Actual = NaN, Result = INCORRECT ] 
               Median                   : Null [ Expected = 17.5    , Actual = Null,Result = INCORRECT ]
               Minimum                  : 20   [ Expected = 15      , Actual = 20  ,Result = INCORRECT ]
               Mode                     : 15   [ Expected = 15 | 20 , Actual = 15 or 20 , Result = INCORRECT ]
               Standard Deviation       : NaN  [ Expected = 2.5     , Actual = NaN ,Result = INCORRECT ] 
               Sum                      : 60   [ Expected = 35      , Actual = 60  ,Result = INCORRECT ]
               Prorated Sum             : NaN  [ Expected = 60      , Actual = NaN ,Result = INCORRECT ]  
               Weighted Mean            : NaN  [ Expected = 17.5    , Actual = NaN ,Result = INCORRECT ] 
               WeightedStandardDeviation: NaN  [ Expected = 17.5    , Actual = NaN ,Result = INCORRECT ]
    -->
    <Commands>
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTarget, 3, )
      <!-- #### [DOMINANT INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTarget, 25, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTarget, 25, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTarget, 20.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTarget, 20.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTarget, 15, )
      <!-- #### [MODE INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTarget, 20, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTarget, 4.08, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTarget, 60, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTarget, 60.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTarget, 20.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTarget, 4.08, )
    </Commands>
  </Function>

  <Function logged = "false">
    <Name>subF-TestAggregateFunctionT7</Name>
    <!--TEST : Mask is TRACK based and Aggregate is CORRIDOR -->
    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTarget</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>

    <!-- Test set T7 - [ Mask is TRACK based and Aggregate is CORRIDOR ] -->
    <!-- Note: Values returned for the functions listed against expected results:

               Count                    :  6
               Dominant                 : 20 [ Both 15 and 20 were provided as values.] 
               Maximum                  : 25
               Mean                     : 22.5 
               Median                   : 25.0
               Minimum                  : 15
               Mode                     : 20 [ Both 20 and 25 were provided as values ]
               Standard Deviation       :  3.82
               Sum                      :135 
               Prorated Sum             : 60.0  
               Weighted Mean            : 22.5 
               WeightedStandardDeviation:  4.0
    -->

    <Commands>
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTarget, 6, )
      <!-- #### [DOMINANT INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTarget, 20, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTarget, 25, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTarget, 22.5, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTarget, 25.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTarget, 15, )
      <!-- #### [MODE INCORRECT] #### -->
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTarget, 25, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTarget, 3.82, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTarget, 135, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTarget, 60.0, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTarget, 22.5, )
      bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTarget, 3.82, )
    </Commands>
  </Function>

  <Function logged = "false">
    <Name>subF-TestAggregateFunctionH1</Name>

    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTestHistoric</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>lisHistFilterOptions</Name>
      <Type>object</Type>
    </Parameter>

    <Commands>

    <!-- ######################################################################################
         ################################## Historic Dataset 1 ################################
         ######################################################################################
    -->
      <!-- Variant 2 -->
      <!-- Using the Historic Dataset 1 ( speeds are 20, 25, 45 )-->
      <!-- Note: Values returned for the functions listed against expected results:

                                                   Contain  Exclude   Overlap    Within
               Count                    :             2         1         2         2
               Dominant                 :            20        45        20        20
               Maximum                  :            25        45        25        25
               Mean                     :            22.5      45.0      22.5      22.5 
               Median                   :            22.5      45.0      22.5      22.5 
               Minimum                  :            20        45        20        20
               Mode                     :            20        45        20        20
               Standard Deviation       :             2.5      0.0        2.5       2.5 
               Sum                      :            45        45        45        45
               Prorated Sum             :            45        45.0      45.0      45.0
               Weighted Mean            :            21.25     45.0      21.25     21.25 
               WeightedStandardDeviation:            3.0       0.0        3.0       3.0 
    -->
      console.ShowValue ("######################## HISTORY 1 ########################", "############################ HISTORY 1 ##########################")
      <ForEach var = "strOption" in = "lisHistFilterOptions" verbose = "true">
        <Switch var = "strOption" verbose = "false">

          <Case value = "&quot;Contain&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 2, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 20, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 45, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 45.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
          </Case>

          <Case value = "&quot;Exclude&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 1, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 45, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 45, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 45.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 45.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 45, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 45, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 45, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 45.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 45.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
          </Case>

          <Case value = "&quot;Overlap&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 2, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 20, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 45, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 45.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
          </Case>

          <Case value = "&quot;Within&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 2, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 20, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 45, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 45.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
          </Case>
          <Default>
            test.FailIfEqual (0, 0, "", "Unrecognized Aggregate option.")
          </Default>
        </Switch>
      </ForEach>

    </Commands>
  </Function>

  <Function logged = "false">
    <Name>subF-TestAggregateFunctionH2</Name>

    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTestHistoric</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>lisHistFilterOptions</Name>
      <Type>object</Type>
    </Parameter>

    <Commands>

    <!-- ######################################################################################
         ################################## Historic Dataset 2 ################################
         ######################################################################################
    -->
      <!-- Variant 2 -->
      <!-- Using the Historic Dataset 1 ( speeds are 20, 25, 45 )-->
      <!-- Note: Values returned for the functions listed against expected results:

                                                   Contain  Exclude   Overlap    Within
               Count                    :             2         1         2         2
               Dominant                 :            20        45        20        20
               Maximum                  :            25        45        25        25
               Mean                     :            22.5      45.0      22.5      22.5 
               Median                   :            22.5      45.0      22.5      22.5 
               Minimum                  :            20        45        20        20
               Mode                     :            20        45        20        20
               Standard Deviation       :             2.5      0.0        2.5       2.5 
               Sum                      :            45        45        45        45
               Prorated Sum             :            45        45.0      45.0      45.0
               Weighted Mean            :            21.25     45.0      21.25     21.25 
               WeightedStandardDeviation:            3.0       0.0        3.0       3.0 
    -->
      console.ShowValue ("######################## HISTORY 2 ########################", "############################ HISTORY 2 ##########################")
      <ForEach var = "strOption" in = "lisHistFilterOptions" verbose = "true">
        <Switch var = "strOption" verbose = "false">
          <Case value = "&quot;Contain&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 2, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 20, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 45, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 45.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
          </Case>

          <Case value = "&quot;Exclude&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 1, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 30, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 30, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 30.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 30.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 30, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 30, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 30, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 30.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 30.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
          </Case>

          <Case value = "&quot;Overlap&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 2, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 20, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 45, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 45.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
          </Case>

          <Case value = "&quot;Within&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 2, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 20, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 45, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 45.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
          </Case>
          <Default>
            test.FailIfEqual (0, 0, "", "Unrecognized Aggregate option.")
          </Default>
        </Switch>
      </ForEach>

    </Commands>
  </Function>

  <Function logged = "false">
    <Name>subF-TestAggregateFunctionH3</Name>

    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTestHistoric</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>lisHistFilterOptions</Name>
      <Type>object</Type>
    </Parameter>

    <Commands>

      <!-- ######################################################################################
         ################################## Historic Dataset 3 ################################
         ######################################################################################
    -->
      <!-- Variant 2 -->
      <!-- Using the Historic Dataset 1 ( speeds are 20, 25, 45 )-->
      <!-- Note: Values returned for the functions listed against expected results:

                                                   Contain  Exclude   Overlap    Within
               Count                    :             3         1         2         2
               Dominant                 :            20        45        20        20*
               Maximum                  :            25        45        25        25
               Mean                     :            20.0      45.0      22.5      NaN  
               Median                   :            20.0      45.0      22.5      NaN  
               Minimum                  :            20        45        20        20  
               Mode                     :            20        45        20        NaN 
               Standard Deviation       :             2.5      0.0        2.5      NaN  
               Sum                      :            45        45        45        45  
               Prorated Sum             :            45        45.0      45.0      NaN  
               Weighted Mean            :            21.25     45.0      21.25     NaN   
               WeightedStandardDeviation:            3.0       0.0        3.0      NaN  
    -->
      console.ShowValue ("######################## HISTORY 3 ########################", "############################ HISTORY 3 ##########################")
      <ForEach var = "strOption" in = "lisHistFilterOptions" verbose = "true">
        <Switch var = "strOption" verbose = "false">
          <Case value = "&quot;Contain&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 3, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 20.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 20.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 4.08, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 60, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 60.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 20.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 4.08, strOption)
          </Case>

          <Case value = "&quot;Exclude&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 3, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 40, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 40, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 31.67, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 30.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 25, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 45, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 6.24, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 95, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 95.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 31.67, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 6.24, strOption)
          </Case>

          <Case value = "&quot;Overlap&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 3, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 20.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 20.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 4.08, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 60, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 60.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 20.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 4.08, strOption)
          </Case>

          <Case value = "&quot;Within&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 2, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 40, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 20, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 30, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 45, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 45.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
          </Case>
          <Default>
            test.FailIfEqual (0, 0, "", "Unrecognized Aggregate option.")
          </Default>
        </Switch>
      </ForEach>

    </Commands>
  </Function>

  <Function logged = "false">
    <Name>subF-TestAggregateFunctionH4</Name>

    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTestHistoric</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>lisHistFilterOptions</Name>
      <Type>object</Type>
    </Parameter>

    <Commands>
      <!-- ######################################################################################
           ################################## Historic Dataset 4 ################################
           ######################################################################################
      -->
      <!-- Variant 2 -->
      <!-- Using the Historic Dataset 1 ( speeds are 20, 25, 45 )-->
      <!-- Note: Values returned for the functions listed against expected results:

                                                   Contain  Exclude   Overlap    Within
               Count                    :             4         2         2         2
               Dominant                 :            15        20        20        20*
               Maximum                  :            15        20        25        25
               Mean                     :            NaN       45.0      22.5      NaN  
               Median                   :            NaN       45.0      22.5      NaN  
               Minimum                  :            99        45        20        20  
               Mode                     :            99        45        20        NaN 
               Standard Deviation       :            99        0.0        2.5      NaN  
               Sum                      :            99        45        45        45  
               Prorated Sum             :            99        45.0      45.0      NaN  
               Weighted Mean            :            99        45.0      21.25     NaN   
               WeightedStandardDeviation:            99        0.0        3.0      NaN  
    -->
      console.ShowValue ("######################## HISTORY 4 ########################", "############################ HISTORY 4 ##########################")
      <ForEach var = "strOption" in = "lisHistFilterOptions" verbose = "true">
        <Switch var = "strOption" verbose = "false">
          <Case value = "&quot;Contain&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 4, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 60, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 60.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
          </Case>

          <Case value = "&quot;Exclude&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 2, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 17.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 17.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 35, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 35.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 17.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
          </Case>

          <Case value = "&quot;Overlap&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 4, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 60, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 60.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
          </Case>

          <Case value = "&quot;Within&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 2, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 30, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 30.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
          </Case>
          <Default>
            test.FailIfEqual (0, 0, "", "Unrecognized Aggregate option.")
          </Default>
        </Switch>
      </ForEach>

    </Commands>
  </Function>

  <Function logged = "false">
    <Name>subF-TestAggregateFunctionH5</Name>

    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTestHistoric</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>lisHistFilterOptions</Name>
      <Type>object</Type>
    </Parameter>

    <Commands>
    <!-- ######################################################################################
         ################################## Historic Dataset 5 ################################
         ######################################################################################
    -->
      <!-- Variant 2 -->
      <!-- Using the Historic Dataset TEST-H5 -->
      <!-- Note: Values returned for the functions listed against expected results:

                                                   Contain  Exclude   Overlap    Within
               Count                    :             1         1         1         0 
               Dominant                 :            15        Null      15        Null
               Maximum                  :            15        Null      15        Null
               Mean                     :            Null      NaN       Null      NaN  
               Median                   :            Null      Null      15        Null 
               Minimum                  :            15        Null      15        Null
               Mode                     :            15        Null      NaN       Null
               Standard Deviation       :            Null      NaN       NaN       NaN  
               Sum                      :            6.0       Null      15        Null
               Prorated Sum             :            Null      NaN       NaN       Null 
               Weighted Mean            :            0.0       NaN       NaN       Null  
               WeightedStandardDeviation:            15        NaN       NaN       NaN  
    -->
      console.ShowValue ("######################## HISTORY 5 ########################", "############################ HISTORY 5 ##########################")
      <ForEach var = "strOption" in = "lisHistFilterOptions" verbose = "true">
        <Switch var = "strOption" verbose = "false">
          <Case value = "&quot;Contain&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 1, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 15, strOption)
          </Case>

          <Case value = "&quot;Exclude&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 1, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
          </Case>

          <Case value = "&quot;Overlap&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 3, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 18.33, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 4.71, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 55, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 55.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 18.33, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 4.71, strOption)
          </Case>

          <Case value = "&quot;Within&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 1, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
          </Case>
          <Default>
            test.FailIfEqual (0, 0, "", "Unrecognized Aggregate option.")
          </Default>
        </Switch>
      </ForEach>
   </Commands>
</Function>

  <Function logged = "false">
    <Name>subF-TestAggregateFunctionH6</Name>

    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTestHistoric</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>lisHistFilterOptions</Name>
      <Type>object</Type>
    </Parameter>

    <Commands>
    <!-- ######################################################################################
         ################################## Historic Dataset 6 ################################
         ######################################################################################
    -->
      <!-- Variant 2  - [ Mask is CORRIDOR based and 'To Aggregate' is TRACK based ] -->
      <!-- Using the Historic Dataset TEST-H6 -->
      <!-- Note: Values returned for the functions listed against expected results:

                                                   Contain  Exclude   Overlap    Within
               Count                    :             2          1        4         1  
               Dominant                 :            15         25       25 | 15   25  
               Maximum                  :            25         25       25        25  
               Mean                     :            22.5       25.0     NaN       NaN  
               Median                   :            22.5       25.0     Null      null 
               Minimum                  :            20         25       15        25  
               Mode                     :            20         25       25        25 | 20  
               Standard Deviation       :            2.5        5.0      NaN       NaN  
               Sum                      :            45         25       85        25  
               Prorated Sum             :            0.0        NaN      NaN       NaN  
               Weighted Mean            :            22.5       NaN      NaN       NaN   
               WeightedStandardDeviation:            2.5        NaN      NaN       NaN  
    -->
      console.ShowValue ("######################## HISTORY 6 ########################", "############################ HISTORY 6 ##########################")
      <ForEach var = "strOption" in = "lisHistFilterOptions" verbose = "true">
        <Switch var = "strOption" verbose = "false">
          <Case value = "&quot;Contain&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 2, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 20, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 45, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 2.5, strOption)
          </Case>

          <Case value = "&quot;Exclude&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 1, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 25.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 25.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 25, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 25.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
          </Case>

          <Case value = "&quot;Overlap&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 4, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 21.25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 22.5, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 25, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 4.15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 85, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 21.25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 4.15, strOption)
          </Case>

          <Case value = "&quot;Within&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 1, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 25.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 25.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 25, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 25, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 25.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
          </Case>
          <Default>
            test.FailIfEqual (0, 0, "", "Unrecognized Aggregate option.")
          </Default>
        </Switch>
      </ForEach>

    </Commands>
  </Function>

  <Function logged = "false">
    <Name>subF-TestAggregateFunctionH7</Name>

    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estEventsTestHistoric</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrSource</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>lisHistFilterOptions</Name>
      <Type>object</Type>
    </Parameter>

    <Commands>
    <!-- ######################################################################################
         ################################## Historic Dataset 7 ################################
         ######################################################################################
    -->
      <!-- Variant 2  [ Mask is TRACK based and Aggregate is CORRIDOR based.] -->
      <!-- Using the Historic Dataset TEST-H7 -->
      <!-- Note: Values returned for the functions listed against expected results:

                                                   Contain  Exclude   Overlap    Within
               Count                    :            99         99       99        99  
               Dominant                 :            99         99       99        99  
               Maximum                  :            99         99       99        99  
               Mean                     :            99         99       99        99   
               Median                   :            99         99       99        99   
               Minimum                  :            99         99       99        99  
               Mode                     :            99         99       99        99  
               Standard Deviation       :            99         99       99        99   
               Sum                      :            99         99       99        99  
               Prorated Sum             :            99         99       99        99   
               Weighted Mean            :            99         99       99        99    
               WeightedStandardDeviation:            99         99       99        99   
    -->
      console.ShowValue ("######################## HISTORY 7 ########################", "############################ HISTORY 7 ##########################")
      <ForEach var = "strOption" in = "lisHistFilterOptions" verbose = "true">
        <Switch var = "strOption" verbose = "false">
          <Case value = "&quot;Contain&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 1, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 6.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 15, strOption)
          </Case>

          <Case value = "&quot;Exclude&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 0, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 35.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 35.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 20, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 35, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 5.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 70.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 35.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 5.0, strOption)
          </Case>

          <Case value = "&quot;Overlap&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 1, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 6.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 15.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 0.0, strOption)
          </Case>

          <Case value = "&quot;Within&quot;">
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Count", strAttrSource, "Freight Speed Count", estEventsMask, estEventsTestHistoric, 2, strOption)
            <!-- #### [DOMINANT INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Dominant", strAttrSource, "Freight Speed Dominant", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Maximum", strAttrSource, "Freight Speed Maximum", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mean", strAttrSource, "Freight Speed Mean", estEventsMask, estEventsTestHistoric, 23.33, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Median", strAttrSource, "Freight Speed Median", estEventsMask, estEventsTestHistoric, 25.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Minimum", strAttrSource, "Freight Speed Minimum", estEventsMask, estEventsTestHistoric, 15, strOption)
            <!-- #### [MODE INCORRECT] #### -->
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Mode", strAttrSource, "Freight Speed Mode", estEventsMask, estEventsTestHistoric, 15, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "StandardDeviation", strAttrSource, "Freight Speed StdDev", estEventsMask, estEventsTestHistoric, 2.3570226039551585, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "Sum", strAttrSource, "Freight Speed Sum", estEventsMask, estEventsTestHistoric, 30, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "ProratedSum", strAttrSource, "Freight Speed Prorated Sum", estEventsMask, estEventsTestHistoric, 70.0, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedMean", strAttrSource, "Freight Speed WeightedMean", estEventsMask, estEventsTestHistoric, 21.43, strOption)
            bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, strTest, "WeightedStandardDeviation", strAttrSource, "Freight Speed WeightedStdDev", estEventsMask, estEventsTestHistoric, 3.0, strOption)
          </Case>
          <Default>
            test.FailIfEqual (0, 0, "", "Unrecognized Aggregate option.")
          </Default>
        </Switch>
      </ForEach>
    </Commands>
  </Function>

  <!-- Example Event Aggregate Function Call -->
  <!-- bolSuccess = script.Call ("subF-TestAggregateFunction", blnThrowExceptionOnFailure, "Count", strAttrSource, "Freight Speed Count", estEventsTest, estEventsTarget, 5, ) -->
  <Function logged = "false">
    <Name>subF-TestAggregateFunction</Name>

    <Parameter>
      <Name>blnThrowExceptionOnFailure</Name>
      <Type>boolean</Type>
      <Default>true</Default>
      <Alias>Throw Exception on Failure</Alias>
    </Parameter>

    <Parameter>
      <Name>strTest</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>strOption</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>strSourceAttr</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>strTargetAttr</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>estTestMask</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>estTest</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>valueExpected</Name>
      <Type>double</Type>
    </Parameter>

    <Parameter>
      <Name>strHistFilterOpt</Name>
      <Type>string</Type>
      <Default></Default>
      <Source>choice</Source>
      <Choice>Within</Choice>
      <Choice>Contain</Choice>
      <Choice>Overlap</Choice>
      <Choice>Exclude</Choice>
    </Parameter>

    <Commands>
      strMsg=util.Assign ("######################################################################################################################")
      console.ShowValue (">", strMsg)
      strMsg=string.Format ("Test [%s] Source [%s] Target [%s] Option [%s] Filter [%s]", strTest, strSourceAttr, strTargetAttr, strOption, strHistFilterOpt)
      console.ShowValue ("Execution Parameters:", strMsg)
      <If condition = "$strOption == &quot;Dominant&quot; || $strOption == &quot;Mode&quot;" >
      <Then> console.ShowValue("[Dominant / Mode]","These values are currently EXCLUDED FROM TESTING - IGNORED.")
      </Then>
      <Else>
      estEvents = event.Aggregate (estTestMask, estTest, strSourceAttr, strTargetAttr, strOption, strHistFilterOpt)
      strMsg=string.Format ("Function [%s] Filter [%s]", strOption, strHistFilterOpt)
      lisResultSet = event.GetEventList (estEvents)
<!--
console.ShowValue ("Mask Set", estTestMask)
console.ShowValue ("Test Set", estTest)
console.ShowValue (strTargetAttr, lisResultSet)
-->
      evtEventAttributes = collection.ListGet (lisResultSet, 0)
<!--
console.ShowValue (strTargetAttr, evtEventAttributes)
-->
      value = event.GetEventAttribute (evtEventAttributes, strTargetAttr)
      <!-- Here we are going to ROUND up the weighted mean value BUT this needs to come out in the final script.-->
      <!-- <If condition = "$strOption == &quot;WeightedMean&quot; || $strOption == &quot;WeightedStandardDeviation&quot;" verbose = "false"> -->
      <If condition = "$strOption == &quot;Mean&quot; || $strOption == &quot;ProratedSum&quot; || $strOption == &quot;WeightedMean&quot; || $strOption == &quot;WeightedStandardDeviation&quot; || $strOption == &quot;StandardDeviation&quot;" verbose = "false">
        <Then>
          <!--
           <If condition = "$strOption == &quot;Mean&quot; ||$strOption == &quot;WeightedMean&quot; || $strOption == &quot;WeightedStandardDeviation&quot;" verbose ="false">
           -->
          <If condition = "$strOption == &quot;Mean&quot; ||$strOption == &quot;WeightedMean&quot; || $strOption == &quot;StandardDeviation&quot;|| $strOption == &quot;WeightedStandardDeviation&quot;" verbose = "false">
            <Then>
              forValue = formula.Create ("round ($value, 2)")
              value  = formula.Evaluate (forValue, , "double")
            </Then>
            <Else>
              forValue = formula.Create ("round ($value, 0)")
              value  = formula.Evaluate (forValue, , "double")
            </Else>
          </If>
        </Then>
      </If>
      strMsg =  string.Format ("Filter [%s] Function [%S] value is ", strHistFilterOpt, strOption)
      strCorrect = string.Append (strMsg, "Correct.")
      strExpected = string.Format (" Value expected %s. Value obtained %s", valueExpected, value)
      strIncorrect  = string.Append (strMsg, "Incorrect.", strExpected)
      <If condition = "$blnThrowExceptionOnFailure" verbose = "false">
        <Then>
          test.FailIfNotEqual (value, valueExpected, strCorrect, strIncorrect)
        </Then>
        <Else>
          test.WarnIfNotEqual (value, valueExpected, strIncorrect)
        </Else>
      </If>
      </Else>
     </If>
    </Commands>
  </Function>


  <!-- Create a function that takes a set of events as an imput parameter
       together with a NUMBER. The NUMBER is the number of events that are 
       required to be returned in the resultant event set.
  -->
  <Function logged = "false">
    <Name>subF-ExtractEventRecords</Name>
    <Parameter>
      <Name>estEvents</Name>
      <Type>eventSet</Type>
    </Parameter>

    <Parameter>
      <Name>intRecs</Name>
      <Type>integer</Type>
    </Parameter>

    <Result>
      <Name>estResults</Name>
      <Type>eventSet</Type>
    </Result>

    <Commands>
      lisEventSet   = event.GetEventList (estEvents)
      intEventRecs  = collection.Size (lisEventSet )
      <If condition = "$intEventRecs &gt; 0" verbose = "false">
        <Then>
          <While condition = "$intEventRecs &gt; $intRecs" verbose = "false">
            collection.ListRemoveIndex (lisEventSet, 0) <!-- Removes the FIRST record in the set always. -->
            intEventRecs  = collection.Size (lisEventSet)
          </While>
          estResults = event.CreateEventSet (lisEventSet)
        </Then>
        <Else>
          estResults = event.CreateEmptyEventSet ()
        </Else>
      </If>
    </Commands>
  </Function>

   <Function Logged="false">
    <Name>subF-ExtractTestData</Name>
    <Description>
      Unit tests script for EVENT data functions.
      The script will test the event functionality for the Aggregate event function ( event.Aggregate )
      A data set will be defined at the start of the script and this dataset will be accessed by the
      defined Aggregate functions.
      Note: There are 2 variants for this command and both variants need to be tested.
    </Description>

    <Parameter>
      <Name>strEventSetName</Name>
      <Type>string</Type>
      <Source>choice</Source>
      <Choice>EVENT-MASK</Choice>
      <Choice>EVENT-MASK-TRACK</Choice>
      <Choice>EVENT-MASK-POINT</Choice>
      <Choice>EVENT-MASK-POINT-TRACK</Choice>
      <Choice>TEST-T1</Choice>
      <Choice>TEST-T2</Choice>
      <Choice>TEST-T3</Choice>
      <Choice>TEST-T4</Choice>
      <Choice>TEST-T5</Choice>
      <Choice>TEST-T6</Choice>
      <Choice>TEST-T7</Choice>
      <Choice>TEST-H1</Choice>
      <Choice>TEST-H2</Choice>
      <Choice>TEST-H3</Choice>
      <Choice>TEST-H4</Choice>
      <Choice>TEST-H5</Choice>
      <Choice>TEST-H6</Choice>
      <Choice>TEST-H7</Choice>
    </Parameter>

  <Parameter required="true">
    <Name>strAttrCorridor</Name>
    <Type>string</Type>
    <Source>corridor</Source>
    <Alias>Corridor</Alias>
  </Parameter>

  <Parameter required="true">
    <Name>strAttrTrackId</Name>
    <Type>string</Type>
    <Alias>Track</Alias>
    <Default>01</Default>
  </Parameter>

  <Parameter required="true">
    <Name>strMarkerStart</Name>
    <Type>string</Type>
    <Default>2</Default>
  </Parameter>

  <Parameter required="true">
    <Name>strMarkerEnd</Name>
    <Type>string</Type>
    <Default>12</Default>
  </Parameter>

  <Parameter required="true">
    <Name>strTraversalType</Name>
    <Type>string</Type>
    <Source>choice</Source>
    <Choice>Corridor</Choice>
    <Choice>Track</Choice>
    <Default>Corridor</Default>
  </Parameter>

    <Result>
      <Name>estTestEvents</Name>
      <Type>eventSet</Type>
    </Result>

    <Commands>

      uniFoot = unit.GetUnit ("US Customary", "foot")

      strDateFormat = util.Assign ("yyyy-MM-dd")
      estEventsMask = event.CreateEmptyEventSet ()
      estEventsPointMask = event.CreateEmptyEventSet ()
      <!-- Date range is 1 year -->
      strAttrStartDate = util.Assign ("2020-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-01-01 00:00:00.0")

      strAttrTrackID = util.Assign ("01")
      strAttrStartDateTxt = util.Assign ("Start Date")
      strAttrEndDateTxt = util.Assign ("End Date")
      estMarkerRangeEvents = event.CreateRangeEventsFromMarkers (strAttrCorridor, , , , , uniFoot, strAttrTrackID )
      <!--
console.ShowValue ("Marker Range Events", estMarkerRangeEvents)
    -->
      mapAttributeValuePairs = collection.MapCreate ()
      datAttrStartDate = util.ParseDate (strAttrStartDate, strDateFormat)
      datAttrEndDate = util.ParseDate (strAttrEndDate, strDateFormat)
      <!--
console.ShowValue ("Mask Events:", estEventsTestMask)
    -->

      <!-- Note: The following section where we create some events in memory could have been reduced to a
		           stand alone script which defines a TEST event set.
               So here we are going to have our Current event set, our Target event set and then any historic event sets
               that we will use to perform historically related aggregates upon.

##########################################################################################################################
#################################################  EVENT DATA ############################################################
##########################################################################################################################

Current Mask Event Set
======================
Date      0         0.1        0.2        0.3        0.4        0.5        0.6        0.7        0.8       0.9       1.0        1.1      1.2       1.3       1.4       1.5
=======   +==========+==========+==========+==========+==========+==========+==========+==========+=========+=========+==========+========+=========+=========+=========+=========+
                                                                   Evt M1=20
s20200101 +===============================================================================================================================x 
e20220101

Target Event Set - T1
=====================
s20200101   Evt 1=15   Evt 2=15   Evt 3=20   Evt 4=20   Evt 5=20   Evt 6=20   Evt 7=30  Evt 8=30   Evt 9=30  Evt 10=45  Evt 11=45  Evt 12=45
e20220101 +==========+==========+==========+==========+==========+==========+=========+===========+=========+=========+=========+=========+ 

Target Event Set - T2
=====================
                                      Evt 1-T2=20                                                    Evt 2-T2=30
s20200101 +================================================================+==============================================================+
e20220101

Target Event Set - T3
=====================
                                      Evt 1-T3=20                           
s20200101 +================================================================+
e20220101

Target Event Set - T4 (Point)
=====================
                      Evt 1 T4=15, 20, 25, 25, 30 ( 1.20 - 1.28 )
s20200101               + + + + +
e20220101

Target Event Set - T5
=====================
                Evt 1 T5=15, 20, 25 (1.0-1.5, 1.5-1.7, 1.7-2.5)
s20200101         +=======+===+=======+
e20220101 
                Evt 3  
s20150101
e20190101

Target Event Set - T6
=====================                                                                             
s20200101                                                                                                                               1.2 1.24 1.24 1.27                 2.2    2.5 
e20220101                                                                                                                                +==+ +====+                        +======+

Target Event Set - T7
=====================
s20200101          0.1                                     0.4                                      0.8             1.0             1.2                1.4                 1.8           2.0
e20220101           +=======================================+========================================+===============+               +==================+====================+============+

###########################################################
########################  HISTORIC ########################
###########################################################

Historic Event Set (1)
======================
          Evt 1-TH1=20        Evt 2-TH1=25         
s20150101 +======================+================+
e20220101
s20150101                                          Evt 3-TH1=45
e20190101                                         +====================+

Historic Event Set (2)
======================
                                      Evt 1-TH2=15                                                  Evt 2-TH2=30
s20200101 +================================================================+==============================================================+ 
e20220101

Historic Event Set (3) - Point Events
=====================================                                                Evt 3-TH2p=40
                                      Evt 1-TH2=15                     Evt 2-TH2=30   Evt 4-TH2p=45
s20180101 +================================================================++           ++ 
e20210101

Historic Event Set (4) - Point Events
===================================== 
                      Evt 1 H4=15, 20, 25, 25, 30 ( 1.20 - 1.28 )
s20200101                                                                                                                             + +
e20220101
s20150101                                                                                                                                  + +
e20190101
s20190101                                                                                                                                       + +
e20220501

Historic Event Set (5) - Point Events
=====================================                                                                                     1.0                                            1.5
s20150101                                                                                                                  +=========+========+========+========+=========+
e20220101                                                                                                                                    1.2      1.3 
s20150101                                                                                                                                     +========+
e20190101                                                                                                                                    1.2                         1.5
s20210401                                                                                                                                     +===========================+
e20211201
s20210101                                                                                                                                                                             1.7         2.5
e20220401                                                                                                                                                                              +===========+

Historic Event Set (6) - Point Events
=====================================                                                                                    1.0                                             1.5
s20210101                                                                                                                 +===============================================+
e20220401
s20190101                                                                                                                                                                1.5          1.7
e20220401                                                                                                                                                                 +============+
s20210101                                                                                                                                                                             1.7         2.5
e20221201                                                                                                                                                                              +===========+
s20200101                                                                                                                                                                             1.7         2.5
e20220101                                                                                                                                                                              +===========+
s20150101                                                                                                                                                                                    2.0  2.5   +======+
e20170401                                                                                                                                                                                     +=====+

Historic Event Set (7) - Point Events
===================================== 
s20210101                                                                                                                1.0                                             1.5          1.7
e20220401                                                                                                                 +===============================================+============+

Within : Matches events to be aggregated whose history is completely within the masking events history
Contain: Matches events to be aggregated whose history completely contains the masking events history.
Overlap: Matches events to be aggregated whose history overlaps the masking events history
Exclude: Matches events to be aggregated whose history excludes, i.e., does not overlap, the masking

		-->
console.ShowValue("Mask",strEventSetName)
    control.GoToIf("$strEventSetName == \"EVENT-MASK\" || $strEventSetName == \"EVENT-MASK-TRACK\"", "EventMask")
    control.GoToIf("$strEventSetName == \"EVENT-MASK-POINT\" || $strEventSetName == \"EVENT-MASK-POINT-TRACK\"", "EventMaskPoint")
    control.GoToIf("$strEventSetName == \"TEST-T1\"", "TestT1")
    control.GoToIf("$strEventSetName == \"TEST-T2\"", "TestT2")
    control.GoToIf("$strEventSetName == \"TEST-T3\"", "TestT3")
    control.GoToIf("$strEventSetName == \"TEST-T4\"", "TestT4")
    control.GoToIf("$strEventSetName == \"TEST-T5\"", "TestT5")
    control.GoToIf("$strEventSetName == \"TEST-T6\"", "TestT6")
    control.GoToIf("$strEventSetName == \"TEST-T7\"", "TestT7")
    control.GoToIf("$strEventSetName == \"TEST-H1\"", "TestH1")
    control.GoToIf("$strEventSetName == \"TEST-H2\"", "TestH2")
    control.GoToIf("$strEventSetName == \"TEST-H3\"", "TestH3")
    control.GoToIf("$strEventSetName == \"TEST-H4\"", "TestH4")
    control.GoToIf("$strEventSetName == \"TEST-H5\"", "TestH5")
    control.GoToIf("$strEventSetName == \"TEST-H6\"", "TestH6")
    control.GoToIf("$strEventSetName == \"TEST-H7\"", "TestH7")
    <!-- #####################################################################
         ######################    MASK EVENT SET     ########################
         #####################################################################
    -->
    EventMask:
      dblStartLoc = util.ParseDouble ("0.00")
      dblEndLoc = util.ParseDouble ("1.50")
      <!-- Event Record M1 -->
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsMask = event.Add (estEventsMask, estEventTest)

    control.GoTo("End")
      <!-- #####################################################################
           ######################    POINT MASK EVENT SET     ##################
           #####################################################################
      -->
    EventMaskPoint:
      <!-- Event Record PM - Record 1 -->
      dblStartLoc = util.ParseDouble ("1.20")
      dblEndLoc = util.ParseDouble ("1.20")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsPointMask = event.Add (estEventsPointMask, estEventTest)

      <!-- Event Record PM - Record 2 -->
      dblStartLoc = util.ParseDouble ("1.22")
      dblEndLoc = util.ParseDouble ("1.22")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsPointMask = event.Add (estEventsPointMask, estEventTest)

      <!-- Event Record PM - Record 3 -->
      dblStartLoc = util.ParseDouble ("1.24")
      dblEndLoc = util.ParseDouble ("1.24")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsPointMask = event.Add (estEventsPointMask, estEventTest)

      <!-- Event Record PM - Record 4 -->
      dblStartLoc = util.ParseDouble ("1.26")
      dblEndLoc = util.ParseDouble ("1.26")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsPointMask = event.Add (estEventsPointMask, estEventTest)

      <!-- Event Record PM - Record 5 -->
      dblStartLoc = util.ParseDouble ("1.28")
      dblEndLoc = util.ParseDouble ("1.28")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsPointMask = event.Add (estEventsPointMask, estEventTest)

    control.GoTo("End")
      <!-- #####################################################################
           ######################    EVENT SET T1   ############################
           #####################################################################
      -->
    TestT1:
      <!-- Create new target event set T1 -->
      estEventsTargetT1 = event.CreateEmptyEventSet ()
      <!-- Event Record 1 -->
      dblStartLoc = util.ParseDouble ("0.0")
      dblEndLoc = util.ParseDouble ("0.10")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Milepoint From", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "Milepoint To", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT1 = event.Add (estEventsTargetT1, estEventTest)

      <!-- Event Record 2 -->
      dblStartLoc = util.ParseDouble ("0.10")
      dblEndLoc = util.ParseDouble ("0.20")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT1 = event.Add (estEventsTargetT1, estEventTest)

      <!-- Event Record 3 -->
      dblStartLoc = util.ParseDouble ("0.20")
      dblEndLoc = util.ParseDouble ("0.30")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT1 = event.Add (estEventsTargetT1, estEventTest)

      <!-- Event Record 4 -->
      dblStartLoc = util.ParseDouble ("0.30")
      dblEndLoc = util.ParseDouble ("0.40")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT1 = event.Add (estEventsTargetT1, estEventTest)

      <!-- Event Record 5 -->
      dblStartLoc = util.ParseDouble ("0.40")
      dblEndLoc = util.ParseDouble ("0.50")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20  )
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT1 = event.Add (estEventsTargetT1, estEventTest)

      <!-- Event Record 6 -->
      dblStartLoc = util.ParseDouble ("0.50")
      dblEndLoc = util.ParseDouble ("0.60")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20  )
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT1 = event.Add (estEventsTargetT1, estEventTest)

      <!-- Event Record 7 -->
      dblStartLoc = util.ParseDouble ("0.60")
      dblEndLoc = util.ParseDouble ("0.70")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 30  )
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT1 = event.Add (estEventsTargetT1, estEventTest)

      <!-- Event Record 8 -->
      dblStartLoc = util.ParseDouble ("0.70")
      dblEndLoc = util.ParseDouble ("0.80")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 30  )
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT1 = event.Add (estEventsTargetT1, estEventTest)

      <!-- Event Record 9 -->
      dblStartLoc = util.ParseDouble ("0.80")
      dblEndLoc = util.ParseDouble ("0.90")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 30  )
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT1 = event.Add (estEventsTargetT1, estEventTest)

      <!-- Event Record 10 -->
      dblStartLoc = util.ParseDouble ("0.90")
      dblEndLoc = util.ParseDouble ("1.00")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 45  )
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT1 = event.Add (estEventsTargetT1, estEventTest)

      <!-- Event Record 11 -->
      dblStartLoc = util.ParseDouble ("1.00")
      dblEndLoc = util.ParseDouble ("1.10")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 45  )
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT1 = event.Add (estEventsTargetT1, estEventTest)

      <!-- Event Record 12 -->
      dblStartLoc = util.ParseDouble ("1.10")
      dblEndLoc = util.ParseDouble ("1.20")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 45  )
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT1 = event.Add (estEventsTargetT1, estEventTest)

      lisEventSet  = event.GetEventList (estEventsMask)
      intEventRecs = collection.Size (lisEventSet )

    control.GoTo("End")
      <!-- #####################################################################
           ######################    EVENT SET T2   ############################
           #####################################################################
      -->
    TestT2:
      <!-- Create new target event set T2 -->
      estEventsTargetT2 = event.CreateEmptyEventSet ()
      <!-- Event Record 1 -->
      dblStartLoc = util.ParseDouble ("0.00")
      dblEndLoc = util.ParseDouble ("0.50")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT2 = event.Add (estEventsTargetT2, estEventTest)

      <!-- Event Record 2 -->
      dblStartLoc = util.ParseDouble ("0.50")
      dblEndLoc = util.ParseDouble ("1.20")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 30)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT2 = event.Add (estEventsTargetT2, estEventTest)

    control.GoTo("End")
      <!-- #####################################################################
           ######################    EVENT SET T3   ############################
           #####################################################################
      -->
    TestT3:
      <!-- Create new target event set T3 -->
      estEventsTargetT3 = event.CreateEmptyEventSet ()
      <!-- Event Record 1 -->
      dblStartLoc = util.ParseDouble ("0.00")
      dblEndLoc = util.ParseDouble ("0.60")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT3 = event.Add (estEventsTargetT3, estEventTest)

    control.GoTo("End")
      <!-- #####################################################################
           #####################    EVENT SET T4 - POINT EVENT SET    ##########
           #####################################################################
      -->
    TestT4:
      <!-- Create new target event set T4 -->
      estEventsTargetT4 = event.CreateEmptyEventSet ()
      <!-- Event Record -->
      dblStartLoc = util.ParseDouble ("1.20")
      dblEndLoc = util.ParseDouble ("1.20")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT4 = event.Add (estEventsTargetT4, estEventTest)

      <!-- Event Record 2 -->
      dblStartLoc = util.ParseDouble ("1.22")
      dblEndLoc = util.ParseDouble ("1.22")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT4 = event.Add (estEventsTargetT4, estEventTest)

      <!-- Event Record 3 -->
      dblStartLoc = util.ParseDouble ("1.24")
      dblEndLoc = util.ParseDouble ("1.24")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT4 = event.Add (estEventsTargetT4, estEventTest)

      <!-- Event Record 4 -->
      dblStartLoc = util.ParseDouble ("1.26")
      dblEndLoc = util.ParseDouble ("1.26")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT4 = event.Add (estEventsTargetT4, estEventTest)

      <!-- Event Record 5 -->
      dblStartLoc = util.ParseDouble ("1.28")
      dblEndLoc = util.ParseDouble ("1.28")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 30)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT4 = event.Add (estEventsTargetT4, estEventTest)

    control.GoTo("End")
      <!-- #####################################################################
           ######################    EVENT SET T5   ############################
           #####################################################################
      -->
    TestT5:
      estEventsTargetT5 = event.CreateEmptyEventSet ()

      <!-- Event Record 1 -->
      dblStartLoc = util.ParseDouble ("0.6")
      dblEndLoc = util.ParseDouble ("0.9")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT5 = event.Add (estEventsTargetT5, estEventTest)

      <!-- Event Record 2 -->
      dblStartLoc = util.ParseDouble ("1.22")
      dblEndLoc = util.ParseDouble ("1.23")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT5 = event.Add (estEventsTargetT5, estEventTest)

      <!-- Event Record 3 -->
      dblStartLoc = util.ParseDouble ("1.24")
      dblEndLoc = util.ParseDouble ("1.26")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT5 = event.Add (estEventsTargetT5, estEventTest)

      <!-- Event Record 4 -->
      dblStartLoc = util.ParseDouble ("1.28")
      dblEndLoc = util.ParseDouble ("1.29")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT5 = event.Add (estEventsTargetT5, estEventTest)

      <!-- Event Record 5 -->
      dblStartLoc = util.ParseDouble ("1.4")
      dblEndLoc = util.ParseDouble ("1.7")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT5 = event.Add (estEventsTargetT5, estEventTest)

    control.GoTo("End")
      <!-- #####################################################################
           ######################    EVENT SET T6   ############################
           #####################################################################
           Note: This data set has to have a TRACK BASED traversal.
      -->
    TestT6:
      estEventsTargetT6 = event.CreateEmptyEventSet ()

      <!-- Event Record 1 -->
      dblStartLoc = util.ParseDouble ("1.2")
      dblEndLoc = util.ParseDouble ("1.24")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT6 = event.Add (estEventsTargetT6, estEventTest)

      <!-- Event Record 2 -->
      dblStartLoc = util.ParseDouble ("1.24")
      dblEndLoc = util.ParseDouble ("1.27")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT6 = event.Add (estEventsTargetT6, estEventTest)

      <!-- Event Record 3 -->
      dblStartLoc = util.ParseDouble ("2.2")
      dblEndLoc = util.ParseDouble ("2.5")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT6 = event.Add (estEventsTargetT6, estEventTest)

    control.GoTo("End")
      <!-- #####################################################################
           ######################    EVENT SET T7   ############################
           #####################################################################
           Note: This data set has to have a TRACK BASED traversal.
      -->
    TestT7:
      estEventsTargetT7 = event.CreateEmptyEventSet ()

      <!-- Event Record 1 -->
      dblStartLoc = util.ParseDouble ("0.1")
      dblEndLoc = util.ParseDouble ("0.4")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT7 = event.Add (estEventsTargetT7, estEventTest)

      <!-- Event Record 2 -->
      dblStartLoc = util.ParseDouble ("0.4")
      dblEndLoc = util.ParseDouble ("0.8")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT7 = event.Add (estEventsTargetT7, estEventTest)

      <!-- Event Record 3 -->
      dblStartLoc = util.ParseDouble ("0.8")
      dblEndLoc = util.ParseDouble ("1.0")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT7 = event.Add (estEventsTargetT7, estEventTest)

      <!-- Event Record 4 -->
      dblStartLoc = util.ParseDouble ("1.2")
      dblEndLoc = util.ParseDouble ("1.4")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT7 = event.Add (estEventsTargetT7, estEventTest)

      <!-- Event Record 5 -->
      dblStartLoc = util.ParseDouble ("1.4")
      dblEndLoc = util.ParseDouble ("1.8")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT7 = event.Add (estEventsTargetT7, estEventTest)

      <!-- Event Record 6 -->
      dblStartLoc = util.ParseDouble ("1.8")
      dblEndLoc = util.ParseDouble ("2.0")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsTargetT7 = event.Add (estEventsTargetT7, estEventTest)

    control.GoTo("End")
      <!-- #####################################################################
           ######################    HISTORIC EVENT SET 1  #####################
           #####################################################################
      -->
    TestH1:
      estEventsHistoric1 = event.CreateEmptyEventSet ()
      <!-- Event Record 1 -->
      strAttrStartDate = util.Assign ("2020-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.0")
      dblEndLoc = util.ParseDouble ("0.25")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric1 = event.Add (estEventsHistoric1, estEventTest)

      <!-- Event Record 2 -->
      strAttrStartDate = util.Assign ("2020-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.25")
      dblEndLoc = util.ParseDouble ("0.4")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric1 = event.Add (estEventsHistoric1, estEventTest)

      <!-- Event Record 3 -->
      strAttrStartDate = util.Assign ("2014-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2019-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.4")
      dblEndLoc = util.ParseDouble ("0.55")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 45)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric1 = event.Add (estEventsHistoric1, estEventTest)

    control.GoTo("End")
      <!-- #####################################################################
           ######################    HISTORIC EVENT SET 2  #####################
           #####################################################################
      -->
    TestH2:
      <!-- Event Record 1 -->
      estEventsHistoric2 = event.CreateEmptyEventSet ()
      strAttrStartDate = util.Assign ("2020-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.10")
      dblEndLoc = util.ParseDouble ("0.60")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric2 = event.Add (estEventsHistoric2, estEventTest)

      <!-- Event Record 2 -->
      strAttrStartDate = util.Assign ("2020-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.30")
      dblEndLoc = util.ParseDouble ("0.40")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric2 = event.Add (estEventsHistoric2, estEventTest)

      <!-- Event Record 3 -->
      strAttrStartDate = util.Assign ("2015-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2018-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.50")
      dblEndLoc = util.ParseDouble ("0.77")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 30)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric2 = event.Add (estEventsHistoric2, estEventTest)

    control.GoTo("End")
      <!-- #####################################################################
           ######################    HISTORIC EVENT SET 3  #####################
           #####################################################################
      -->
    TestH3:
      <!-- Event Record 1 -->
      estEventsHistoric3 = event.CreateEmptyEventSet ()
      strAttrStartDate = util.Assign ("2020-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-05-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.10")
      dblEndLoc = util.ParseDouble ("0.60")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric3 = event.Add (estEventsHistoric3, estEventTest)

      <!-- Event Record 2 -->
      strAttrStartDate = util.Assign ("2020-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.6")
      dblEndLoc = util.ParseDouble ("0.6")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric3 = event.Add (estEventsHistoric3, estEventTest)

      <!-- Event Record 3 -->
      strAttrStartDate = util.Assign ("2020-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.61")
      dblEndLoc = util.ParseDouble ("0.61")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric3 = event.Add (estEventsHistoric3, estEventTest)

      <!-- Event Record 4 -->
      strAttrStartDate = util.Assign ("2015-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2019-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.62")
      dblEndLoc = util.ParseDouble ("0.62")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric3 = event.Add (estEventsHistoric3, estEventTest)

      <!-- Event Record 5 -->
      strAttrStartDate = util.Assign ("2015-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2019-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.7")
      dblEndLoc = util.ParseDouble ("0.8")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 30)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric3 = event.Add (estEventsHistoric3, estEventTest)

      <!-- Event Record 6 -->
      strAttrStartDate = util.Assign ("2015-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2019-09-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.7")
      dblEndLoc = util.ParseDouble ("0.8")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 40)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric3 = event.Add (estEventsHistoric3, estEventTest)

    control.GoTo("End")
      <!-- #####################################################################
           ##################    HISTORIC EVENT SET 4     ######################
           #####################################################################
      -->
    TestH4:
      <!-- Create new historic event set H4 -->
      estEventsHistoric4 = event.CreateEmptyEventSet ()
      strAttrStartDate = util.Assign ("2020-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-01-01 00:00:00.0")

      <!-- Event Record 1 -->
      dblStartLoc = util.ParseDouble ("1.20")
      dblEndLoc = util.ParseDouble ("1.20")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric4 = event.Add (estEventsHistoric4, estEventTest)

      <!-- Event Record 2 -->
      dblStartLoc = util.ParseDouble ("1.22")
      dblEndLoc = util.ParseDouble ("1.22")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric4 = event.Add (estEventsHistoric4, estEventTest)

      <!-- Event Record 3 -->
      strAttrStartDate = util.Assign ("2015-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2019-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("1.24")
      dblEndLoc = util.ParseDouble ("1.24")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric4 = event.Add (estEventsHistoric4, estEventTest)

      <!-- Event Record 4 -->
      strAttrStartDate = util.Assign ("2015-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2019-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("1.24")
      dblEndLoc = util.ParseDouble ("1.24")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric4 = event.Add (estEventsHistoric4, estEventTest)

      <!-- Event Record 5 -->
      strAttrStartDate = util.Assign ("2019-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-05-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("1.26")
      dblEndLoc = util.ParseDouble ("1.26")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric4 = event.Add (estEventsHistoric4, estEventTest)

      <!-- Event Record 6 -->
      dblStartLoc = util.ParseDouble ("1.30")
      dblEndLoc = util.ParseDouble ("1.30")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric4 = event.Add (estEventsHistoric4, estEventTest)

    control.GoTo("End")
      <!-- ##########################################################################
           ######################   HISTORIC EVENT SET 5    ########################
           ##########################################################################
      -->
    TestH5:
      estEventsHistoric5 = event.CreateEmptyEventSet ()

      <!-- Event Record 1 -->
      strAttrStartDate = util.Assign ("2015-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("1.0")
      dblEndLoc = util.ParseDouble ("1.5")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric5 = event.Add (estEventsHistoric5, estEventTest)

      <!-- Event Record 2 -->
      strAttrStartDate = util.Assign ("2015-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2019-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("1.2")
      dblEndLoc = util.ParseDouble ("1.3")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric5 = event.Add (estEventsHistoric5, estEventTest)

      <!-- Event Record 3 -->
      strAttrStartDate = util.Assign ("2021-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-04-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("1.7")
      dblEndLoc = util.ParseDouble ("2.5")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric5 = event.Add (estEventsHistoric5, estEventTest)

      <!-- Event Record 4 -->
      strAttrStartDate = util.Assign ("2021-04-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2021-12-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("1.2")
      dblEndLoc = util.ParseDouble ("1.5")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric5 = event.Add (estEventsHistoric5, estEventTest)

    control.GoTo("End")
      <!-- ##########################################################################
           ######################   HISTORIC EVENT SET 6    #########################
           ##########################################################################

         Note: This data set has to have a TRACK BASED traversal.
      -->
    TestH6:
      estEventsHistoric6 = event.CreateEmptyEventSet ()

      <!-- Event Record 1 -->
      strAttrStartDate = util.Assign ("2021-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-04-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("1.0")
      dblEndLoc = util.ParseDouble ("1.5")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric6 = event.Add (estEventsHistoric6, estEventTest)

      <!-- Event Record 2 -->
      strAttrStartDate = util.Assign ("2019-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-04-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("1.5")
      dblEndLoc = util.ParseDouble ("1.7")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric6 = event.Add (estEventsHistoric6, estEventTest)

      <!-- Event Record 3 -->
      strAttrStartDate = util.Assign ("2021-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-12-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("1.7")
      dblEndLoc = util.ParseDouble ("2.5")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric6 = event.Add (estEventsHistoric6, estEventTest)

      <!-- Event Record 4 [ This record is WITHIN ]-->
      strAttrStartDate = util.Assign ("2020-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("1.7")
      dblEndLoc = util.ParseDouble ("2.5")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric6 = event.Add (estEventsHistoric6, estEventTest)

      <!-- Event Record  5 -->
      strAttrStartDate = util.Assign ("2015-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2017-04-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("2.0")
      dblEndLoc = util.ParseDouble ("2.5")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric6 = event.Add (estEventsHistoric6, estEventTest)

    control.GoTo("End")

      <!-- #####################################################################
           ######################### HISTORIC EVENT SET 7 ######################
           #####################################################################

           Note: This data set has to have a TRACK BASED traversal.
      -->
    TestH7:
      estEventsHistoric7 = event.CreateEmptyEventSet ()

      <!-- Event Record 1 -->
      strAttrStartDate = util.Assign ("2021-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2022-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.1")
      dblEndLoc = util.ParseDouble ("0.3")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 15)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric7 = event.Add (estEventsHistoric7, estEventTest)

      <!-- Event Record 2 -->
      dblStartLoc = util.ParseDouble ("0.4")
      dblEndLoc = util.ParseDouble ("0.6")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 20)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric7 = event.Add (estEventsHistoric7, estEventTest)

      <!-- Event Record  3 -->
      dblStartLoc = util.ParseDouble ("0.6")
      dblEndLoc = util.ParseDouble ("0.8")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric7 = event.Add (estEventsHistoric7, estEventTest)

      <!-- Event Record  4 -->
      strAttrStartDate = util.Assign ("2015-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2019-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.2")
      dblEndLoc = util.ParseDouble ("0.5")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric7 = event.Add (estEventsHistoric7, estEventTest)

      <!-- Event Record 5 -->
      dblStartLoc = util.ParseDouble ("0.6")
      dblEndLoc = util.ParseDouble ("0.9")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)
      
      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric7 = event.Add (estEventsHistoric7, estEventTest)

      <!-- Event Record  6 -->
      strAttrStartDate = util.Assign ("2011-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2012-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.0")
      dblEndLoc = util.ParseDouble ("1.1")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric7 = event.Add (estEventsHistoric7, estEventTest)

      <!-- Event Record 7 -->
      strAttrStartDate = util.Assign ("2023-01-01 00:00:00.0")
      strAttrEndDate = util.Assign ("2024-01-01 00:00:00.0")
      dblStartLoc = util.ParseDouble ("0.1")
      dblEndLoc = util.ParseDouble ("1.2")
      collection.MapPut (mapAttributeValuePairs, "Corridor", strAttrCorridor)
      collection.MapPut (mapAttributeValuePairs, "Start Location", dblStartLoc)
      collection.MapPut (mapAttributeValuePairs, "End Location", dblEndLoc)
      collection.MapPut (mapAttributeValuePairs, "Freight Speed", 25)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Start Marker", strMarkerStart)
      collection.MapPut (mapAttributeValuePairs, "End Marker", strMarkerEnd)
      collection.MapPut (mapAttributeValuePairs, "Track ID", strAttrTrackID)
      collection.MapPut (mapAttributeValuePairs, "Traversal Type", strTraversalType)

      estEventTest = script.Call ("subF-CreateTestEvents", mapAttributeValuePairs, strAttrStartDate, strAttrEndDate)
      estEventsHistoric7 = event.Add (estEventsHistoric7, estEventTest)

      End:

      estTestEvents = event.CreateEmptyEventSet ()
      strEventSetName=string.Format ("%S", strEventSetName)
      <Switch var = "strEventSetName" verbose = "false">
        <!--  ###########################################################
              ###########################   MASK   ######################
              ###########################################################
        -->
        <Case value = "&quot;EVENT-MASK&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsMask)
        </Case>
        <Case value = "&quot;EVENT-MASK-TRACK&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsMask) 
        </Case>
        <Case value = "&quot;EVENT-MASK-POINT&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsPointMask)
        </Case>
        <Case value = "&quot;EVENT-MASK-POINT-TRACK&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsPointMask) 
        </Case>
        <!--  ###########################################################
              ###########################   TEST   ######################
              ###########################################################
        -->
        <Case value = "&quot;TEST-T1&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsTargetT1)
        </Case>
        <Case value = "&quot;TEST-T2&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsTargetT2)
        </Case>
        <Case value = "&quot;TEST-T3&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsTargetT3)
        </Case>
        <Case value = "&quot;TEST-T4&quot;"> <!-- Point events -->
          estTestEvents=event.Add (estTestEvents, estEventsTargetT4)
        </Case>
        <Case value = "&quot;TEST-T5&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsTargetT5)
        </Case>
        <Case value = "&quot;TEST-T6&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsTargetT6)
        </Case>
        <Case value = "&quot;TEST-T7&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsTargetT7)
        </Case>
        <!--  ###########################################################
              ###########################   HISTORIC  ###################
              ###########################################################
        -->
        <Case value = "&quot;TEST-H1&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsHistoric1)
        </Case>
        <Case value = "&quot;TEST-H2&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsHistoric2)
        </Case>
        <Case value = "&quot;TEST-H3&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsHistoric3)
        </Case>
        <Case value = "&quot;TEST-H4&quot;"> <!-- Point historic -->
          estTestEvents=event.Add (estTestEvents, estEventsHistoric4) 
        </Case>
        <Case value = "&quot;TEST-H5&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsHistoric5)
        </Case>
        <Case value = "&quot;TEST-H6&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsHistoric6)
        </Case>
        <Case value = "&quot;TEST-H7&quot;">
          estTestEvents=event.Add (estTestEvents, estEventsHistoric7)
        </Case>
        <Default>
          console.ShowValue ("Unidentified option", "")
        </Default>
      </Switch>
    </Commands>
  </Function>

   <Function logged = "false">
    <Name>subF-CreateTestEvents</Name>
    <Parameter>
      <Name>mapAttributeValuePairs</Name>
      <Type>map</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrStartDate</Name>
      <Type>string</Type>
    </Parameter>

    <Parameter>
      <Name>strAttrEndDate</Name>
      <Type>string</Type>
    </Parameter>

    <Result>
      <Name>estEventsTest</Name>
      <Type>eventSet</Type>
    </Result>

    <Commands>
		  uniFoot = unit.GetUnit ("US Customary", "foot")
      strDateFormat = util.Assign("yyyy-MM-dd")
      datStartDate = util.ParseDate (strAttrStartDate, strDateFormat)
      datEndDate = util.ParseDate (strAttrEndDate, strDateFormat)
      lstEventAttributes = collection.MapKeys (mapAttributeValuePairs)
      <!-- Extract the map values -->
      strCorridor = collection.MapGet(mapAttributeValuePairs, "Corridor") 
      dblStartLoc = collection.MapGet(mapAttributeValuePairs, "Start Location") 
      dblEndLoc = collection.MapGet(mapAttributeValuePairs, "End Location") 
      strTrackID = collection.MapGet(mapAttributeValuePairs, "Track ID") 
      strMarkerStart = collection.MapGet(mapAttributeValuePairs, "Start Marker") 
      strMarkerEnd = collection.MapGet(mapAttributeValuePairs, "End Marker") 
      strTraversalType = collection.MapGet(mapAttributeValuePairs, "Traversal Type") 
      bolOkay = collection.ListRemove (lstEventAttributes, "Traversal Type")
      <If condition = "$strTraversalType == &quot;Corridor&quot;" verbose = "false">
      <Then>
          strTraversalSpec = string.Format("%s,%s+%.1f,%s+%.1f", strCorridor, strMarkerStart, dblStartLoc, strMarkerEnd, dblEndLoc )
        </Then>
        <Else>
          strTraversalSpec = string.Format("%s,%s+%.1f,%s,%s+%.1f", strCorridor, strMarkerStart, dblStartLoc, strTrackID, strMarkerEnd, dblEndLoc )
        </Else>
      </If> 
console.ShowValue("Traversal Spec",strTraversalSpec)
      <!-- Create the traversal -->
      trvCorridor = traversal.Create (strTraversalSpec, uniFoot)
      estEventsTest = event.CreateOnTraversal (trvCorridor)
      <ForEach var = "strAttribute" in = "lstEventAttributes">
        attrVal = collection.MapGet (mapAttributeValuePairs, strAttribute)
        estEventsTest = event.SetAttribute (estEventsTest, strAttribute, attrVal)
      </ForEach>
      estEventsTest = event.SetAttribute (estEventsTest, "Start Date", datStartDate)
      estEventsTest = event.SetAttribute (estEventsTest, "End Date", datEndDate)
      estEventsTest = event.SetDatesToAttributes(estEventsTest,"Start Date","End Date")
    </Commands>
  </Function>

</Script>